{"ast":null,"code":"var _jsxFileName = \"/Users/lukemason/Desktop/Folders/SoftwareResearch/wire2wire/client/src/components/Friends/AddFriends.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUsers, updateFriends } from \"../../actions/friends\";\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'firstName',\n  headerName: 'First Name',\n  width: 130\n}, {\n  field: 'lastName',\n  headerName: 'Last Name',\n  width: 130\n}, {\n  field: 'state',\n  headerName: 'State',\n  width: 130\n}];\n\nconst AddFriends = () => {\n  _s();\n\n  var _currentUser$public;\n\n  const dispatch = useDispatch();\n  const users = useSelector(state => state.friends);\n  const currentUser = JSON.parse(localStorage.getItem('profile'));\n  const [newFriends, setNewFriends] = useState([]);\n  let currentFriends = currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$public = currentUser.public) === null || _currentUser$public === void 0 ? void 0 : _currentUser$public.friends;\n  const [newFriendsIsEmpty, setNewFriendsIsEmpty] = useState(true);\n  const history = useHistory();\n\n  const addFriends = () => {\n    if (currentFriends) {\n      currentFriends.forEach(friend => {\n        newFriends.push(friend);\n      });\n    }\n\n    newFriends.push(currentUser.result._id);\n    dispatch(updateFriends(newFriends));\n    history.push(\"/\");\n  };\n\n  const rows = [];\n\n  if (users) {\n    Array.from(users).forEach(user => {\n      console.log(\"user\", user);\n      console.log(\"current user\", currentUser);\n      console.log(currentFriends);\n      const id = user._id;\n\n      if ((!currentFriends || !currentFriends.includes(id)) && id !== currentUser._id) {\n        const firstName = user.public.firstName;\n        const lastName = user.public.lastName;\n        const state = user.public.state;\n\n        if (!state) {\n          const row = {\n            id: id,\n            firstName,\n            lastName,\n            state: \"NA\"\n          };\n          rows.push(row);\n        } else {\n          const row = {\n            id: id,\n            firstName,\n            lastName,\n            state\n          };\n          rows.push(row);\n        }\n      }\n    });\n  }\n\n  useEffect(() => {\n    dispatch(getUsers());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 5,\n      checkboxSelection: true,\n      onSelectionModelChange: newSelection => {\n        setNewFriends(newSelection.selectionModel);\n\n        if (newSelection.selectionModel.length === 0) {\n          setNewFriendsIsEmpty(true);\n        } else {\n          setNewFriendsIsEmpty(false);\n        }\n      },\n      selectionModel: newFriends,\n      ...rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: addFriends,\n      disabled: newFriendsIsEmpty,\n      children: \"Add Friends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddFriends, \"9zZO64cgFFKQ5u+92tz186/DK2Y=\", false, function () {\n  return [useDispatch, useSelector, useHistory];\n});\n\n_c = AddFriends;\nexport default AddFriends;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddFriends\");","map":{"version":3,"sources":["/Users/lukemason/Desktop/Folders/SoftwareResearch/wire2wire/client/src/components/Friends/AddFriends.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getUsers","updateFriends","DataGrid","Button","useHistory","columns","field","headerName","width","AddFriends","dispatch","users","state","friends","currentUser","JSON","parse","localStorage","getItem","newFriends","setNewFriends","currentFriends","public","newFriendsIsEmpty","setNewFriendsIsEmpty","history","addFriends","forEach","friend","push","result","_id","rows","Array","from","user","console","log","id","includes","firstName","lastName","row","height","newSelection","selectionModel","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUsers, updateFriends } from \"../../actions/friends\";\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\n\nconst columns = [\n  { field: 'firstName', headerName: 'First Name', width: 130 },\n  { field: 'lastName', headerName: 'Last Name', width: 130 },\n  { field: 'state', headerName: 'State', width: 130 },\n];\n\nconst AddFriends = () => {\n    const dispatch = useDispatch();\n    const users = useSelector((state) => state.friends);\n    const currentUser = JSON.parse(localStorage.getItem('profile'));\n    const [newFriends, setNewFriends] = useState([]);\n    let currentFriends = currentUser?.public?.friends;\n    const [newFriendsIsEmpty, setNewFriendsIsEmpty] = useState(true);\n    const history = useHistory();\n\n    const addFriends = () => {\n        if (currentFriends) {\n            currentFriends.forEach(friend => {\n                newFriends.push(friend);\n            })\n        }\n        newFriends.push(currentUser.result._id);\n        dispatch(updateFriends(newFriends));\n        history.push(\"/\");\n    }\n\n    const rows = []\n    if(users) {\n        Array.from(users).forEach(user => {\n            console.log(\"user\", user);\n            console.log(\"current user\", currentUser);\n            console.log(currentFriends);\n            const id = user._id;\n            if ((!currentFriends || !currentFriends.includes(id)) && id !== currentUser._id ) {\n                const firstName = user.public.firstName;\n                const lastName = user.public.lastName;\n                const state = user.public.state;\n                if (!state) {\n                    const row = { id: id, firstName, lastName, state:\"NA\" };\n                    rows.push(row);\n                }\n                else {\n                    const row = { id: id, firstName, lastName, state };\n                    rows.push(row);\n                }  \n            }\n        });\n    }\n\n    useEffect(() => {\n        dispatch(getUsers())\n    }, [dispatch])\n\n    return (\n        <div style={{ height: 400, width: '100%' }}>\n            <DataGrid \n                rows={rows} \n                columns={columns} \n                pageSize={5} \n                checkboxSelection \n                onSelectionModelChange={(newSelection) => {\n                    setNewFriends(newSelection.selectionModel);\n                    if (newSelection.selectionModel.length === 0) {\n                        setNewFriendsIsEmpty(true);\n                    }\n                    else {\n                        setNewFriendsIsEmpty(false);\n                    }\n                }}\n                selectionModel={newFriends}\n                    {...rows}\n            />\n            <Button color=\"primary\" variant=\"contained\" onClick={addFriends} disabled={newFriendsIsEmpty}>Add Friends</Button>\n        </div>\n    )\n}\n\nexport default AddFriends;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from\"/Users/lukemason/Desktop/Folders/SoftwareResearch/wire2wire/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from\"react\";import{FormGroup,FormControlLabel,Checkbox,FormLabel}from\"@material-ui/core\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CheckBoxInfo=function CheckBoxInfo(_ref){var _userData$result,_userData$result$publ,_userData$result$publ2,_userData$result2,_userData$result2$pub,_userData$result2$pub2,_userData$result3,_userData$result3$pub,_userData$result3$pub2,_userData$result4,_userData$result4$pub,_userData$result4$pub2,_userData$result5,_userData$result5$pub,_userData$result5$pub2,_userData$result6,_userData$result6$pub,_userData$result6$pub2;var userData=_ref.userData,setUserData=_ref.setUserData,googleUser=_ref.googleUser;return/*#__PURE__*/_jsxs(FormGroup,{row:true,children:[/*#__PURE__*/_jsx(FormLabel,{children:\"What types of runs do you like to do?\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{name:\"ez\",onChange:function onChange(e){return setUserData(_objectSpread(_objectSpread({},userData),{},{result:_objectSpread(_objectSpread({},userData.result),{},{public:_objectSpread(_objectSpread({},userData.result.public),{},{typesOfRuns:_objectSpread(_objectSpread({},userData.result.public.typesOfRuns),{},{easy:e.target.checked})})})}));},value:userData===null||userData===void 0?void 0:(_userData$result=userData.result)===null||_userData$result===void 0?void 0:(_userData$result$publ=_userData$result.public)===null||_userData$result$publ===void 0?void 0:(_userData$result$publ2=_userData$result$publ.typesOfRuns)===null||_userData$result$publ2===void 0?void 0:_userData$result$publ2.easy}),label:\"Easy\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{name:\"wo\",onChange:function onChange(e){return setUserData(_objectSpread(_objectSpread({},userData),{},{result:_objectSpread(_objectSpread({},userData.result),{},{public:_objectSpread(_objectSpread({},userData.result.public),{},{typesOfRuns:_objectSpread(_objectSpread({},userData.result.public.typesOfRuns),{},{workouts:e.target.checked})})})}));},value:userData===null||userData===void 0?void 0:(_userData$result2=userData.result)===null||_userData$result2===void 0?void 0:(_userData$result2$pub=_userData$result2.public)===null||_userData$result2$pub===void 0?void 0:(_userData$result2$pub2=_userData$result2$pub.typesOfRuns)===null||_userData$result2$pub2===void 0?void 0:_userData$result2$pub2.workouts}),label:\"Workouts\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{name:\"lr\",onChange:function onChange(e){return setUserData(_objectSpread(_objectSpread({},userData),{},{result:_objectSpread(_objectSpread({},userData.result),{},{public:_objectSpread(_objectSpread({},userData.result.public),{},{typesOfRuns:_objectSpread(_objectSpread({},userData.result.public.typesOfRuns),{},{longRun:e.target.checked})})})}));},value:userData===null||userData===void 0?void 0:(_userData$result3=userData.result)===null||_userData$result3===void 0?void 0:(_userData$result3$pub=_userData$result3.public)===null||_userData$result3$pub===void 0?void 0:(_userData$result3$pub2=_userData$result3$pub.typesOfRuns)===null||_userData$result3$pub2===void 0?void 0:_userData$result3$pub2.longRun}),label:\"Long Runs\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{name:\"hill\",onChange:function onChange(e){return setUserData(_objectSpread(_objectSpread({},userData),{},{result:_objectSpread(_objectSpread({},userData.result),{},{public:_objectSpread(_objectSpread({},userData.result.public),{},{typesOfRuns:_objectSpread(_objectSpread({},userData.result.public.typesOfRuns),{},{hills:e.target.checked})})})}));},value:userData===null||userData===void 0?void 0:(_userData$result4=userData.result)===null||_userData$result4===void 0?void 0:(_userData$result4$pub=_userData$result4.public)===null||_userData$result4$pub===void 0?void 0:(_userData$result4$pub2=_userData$result4$pub.typesOfRuns)===null||_userData$result4$pub2===void 0?void 0:_userData$result4$pub2.hills}),label:\"Hills\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{name:\"flat\",onChange:function onChange(e){return setUserData(_objectSpread(_objectSpread({},userData),{},{result:_objectSpread(_objectSpread({},userData.result),{},{public:_objectSpread(_objectSpread({},userData.result.public),{},{typesOfRuns:_objectSpread(_objectSpread({},userData.result.public.typesOfRuns),{},{flat:e.target.checked})})})}));},value:userData===null||userData===void 0?void 0:(_userData$result5=userData.result)===null||_userData$result5===void 0?void 0:(_userData$result5$pub=_userData$result5.public)===null||_userData$result5$pub===void 0?void 0:(_userData$result5$pub2=_userData$result5$pub.typesOfRuns)===null||_userData$result5$pub2===void 0?void 0:_userData$result5$pub2.flat}),label:\"Flat\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{name:\"trails\",onChange:function onChange(e){return setUserData(_objectSpread(_objectSpread({},userData),{},{result:_objectSpread(_objectSpread({},userData.result),{},{public:_objectSpread(_objectSpread({},userData.result.public),{},{typesOfRuns:_objectSpread(_objectSpread({},userData.result.public.typesOfRuns),{},{trails:e.target.checked})})})}));},value:userData===null||userData===void 0?void 0:(_userData$result6=userData.result)===null||_userData$result6===void 0?void 0:(_userData$result6$pub=_userData$result6.public)===null||_userData$result6$pub===void 0?void 0:(_userData$result6$pub2=_userData$result6$pub.typesOfRuns)===null||_userData$result6$pub2===void 0?void 0:_userData$result6$pub2.trails}),label:\"Trails\"})]});};export default CheckBoxInfo;","map":{"version":3,"sources":["/Users/lukemason/Desktop/Folders/SoftwareResearch/wire2wire/client/src/components/FormComponents/CheckboxInfo.js"],"names":["React","FormGroup","FormControlLabel","Checkbox","FormLabel","CheckBoxInfo","userData","setUserData","googleUser","e","result","public","typesOfRuns","easy","target","checked","workouts","longRun","hills","flat","trails"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FormGroup, FormControlLabel, Checkbox, FormLabel } from \"@material-ui/core\";\n\n\nconst CheckBoxInfo = ({ userData, setUserData, googleUser }) => {\n    return (\n        <FormGroup row>\n        <FormLabel>What types of runs do you like to do?</FormLabel>\n            <FormControlLabel \n                control={<Checkbox \n                            name=\"ez\" \n                            onChange={(e) => setUserData({ ...userData, result: { ...userData.result, public: {...userData.result.public, typesOfRuns: {...userData.result.public.typesOfRuns, easy: e.target.checked}}}})}\n                            value={userData?.result?.public?.typesOfRuns?.easy}\n                        />} \n                label=\"Easy\" \n            />\n            <FormControlLabel \n                control={<Checkbox \n                            name=\"wo\" \n                            onChange={(e) => setUserData({ ...userData, result: { ...userData.result, public: {...userData.result.public, typesOfRuns: {...userData.result.public.typesOfRuns, workouts: e.target.checked}}}})}\n                            value={userData?.result?.public?.typesOfRuns?.workouts}\n                        />}\n                label=\"Workouts\" \n            />\n            <FormControlLabel \n                control={<Checkbox \n                            name=\"lr\" \n                            onChange={(e) => setUserData({ ...userData, result: { ...userData.result, public: {...userData.result.public, typesOfRuns: {...userData.result.public.typesOfRuns, longRun: e.target.checked}}}})}\n                            value={userData?.result?.public?.typesOfRuns?.longRun}\n                        />} \n                label=\"Long Runs\" \n            />\n            <FormControlLabel \n                control={<Checkbox \n                            name=\"hill\" \n                            onChange={(e) => setUserData({ ...userData, result: { ...userData.result, public: {...userData.result.public, typesOfRuns: {...userData.result.public.typesOfRuns, hills: e.target.checked}}}})}\n                            value={userData?.result?.public?.typesOfRuns?.hills}\n                        />} \n                label=\"Hills\" \n            />\n            <FormControlLabel \n                control={<Checkbox \n                            name=\"flat\" \n                            onChange={(e) => setUserData({ ...userData, result: { ...userData.result, public: {...userData.result.public, typesOfRuns: {...userData.result.public.typesOfRuns, flat: e.target.checked}}}})}\n                            value={userData?.result?.public?.typesOfRuns?.flat}\n                        />} \n                label=\"Flat\" \n            />\n            <FormControlLabel \n                control={<Checkbox \n                            name=\"trails\" \n                            onChange={(e) => setUserData({ ...userData, result: { ...userData.result, public: {...userData.result.public, typesOfRuns: {...userData.result.public.typesOfRuns, trails: e.target.checked}}}})}\n                            value={userData?.result?.public?.typesOfRuns?.trails}\n                        />} \n                label=\"Trails\" \n            />\n        </FormGroup>\n      );\n}\n\nexport default CheckBoxInfo;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/lukemason/Desktop/Folders/SoftwareResearch/youtube/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../actions/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  var _user$result3;\n\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Please Sign In to create your own memories and like other's memories.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [currentId ? \"Editing\" : \"Creating\", \" a Memory\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        vairant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        vairant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        vairant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(\",\")\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"false\",\n          multiple: false,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"container\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"flt7yVmvtJJPUFZnr14Zd+JfWEE=\", false, function () {\n  return [useSelector, useDispatch, useStyles];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/lukemason/Desktop/Folders/SoftwareResearch/youtube/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","useStyles","createPost","updatePost","Form","currentId","setCurrentId","post","state","posts","find","message","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","setPostData","clear","title","tags","selectedFile","handleSubmit","e","preventDefault","postData","name","result","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport  { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../actions/posts\"\n\nconst Form = ({ currentId, setCurrentId}) => {\n\n    const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const user = JSON.parse(localStorage.getItem('profile'));\n  \n    useEffect(() => {\n      if (post) setPostData(post);\n    }, [post]);\n  \n    const clear = () => {\n      setCurrentId(0);\n      setPostData({ title: '', message: '', tags: '', selectedFile: '' });\n    };\n  \n    const handleSubmit = async (e) => {\n      e.preventDefault();\n  \n      if (currentId === 0) {\n        dispatch(createPost({ ...postData, name: user?.result?.name }));\n        clear();\n      } else {\n        dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\n        clear();\n      }\n    };\n  \n    if (!user?.result?.name) {\n      return (\n        <Paper className={classes.paper}>\n          <Typography variant=\"h6\" align=\"center\">\n            Please Sign In to create your own memories and like other's memories.\n          </Typography>\n        </Paper>\n      );\n    }\n\n    return (\n        <Paper className={classes.paper}>\n            <form autoComplete=\"off\" noValidate className={ `${classes.root} ${classes.form}` } onSubmit={handleSubmit}>\n                <Typography variant=\"h6\">{currentId ? \"Editing\" : \"Creating\"} a Memory</Typography>\n                <TextField \n                    name=\"title\" \n                    vairant=\"outlined\" \n                    label=\"Title\" \n                    fullWidth\n                    value={postData.title}\n                    onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n                />\n                <TextField \n                    name=\"message\" \n                    vairant=\"outlined\" \n                    label=\"Message\" \n                    fullWidth\n                    value={postData.message}\n                    onChange={(e) => setPostData({ ...postData, message: e.target.value })}\n                />\n                <TextField \n                    name=\"tags\" \n                    vairant=\"outlined\" \n                    label=\"Tags\" \n                    fullWidth\n                    value={postData.tags}\n                    onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(\",\") })}\n                />\n                <div className={classes.fileInput}>\n                    <FileBase \n                        type=\"false\"\n                        multiple={false}\n                        onDone={({base64}) => setPostData({ ...postData, selectedFile: base64 })}\n                    />\n                </div> \n                <Button className={classes.buttonSubmit} variant = \"container\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n                <Button variant = \"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n            </form>\n        </Paper>\n    );\n}\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}